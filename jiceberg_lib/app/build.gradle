/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java application project to get you started.
 * For more details on building Java & JVM projects, please refer to https://docs.gradle.org/8.9/userguide/building_java_projects.html in the Gradle documentation.
 */

plugins {
    id 'java'
    id 'application'
    id 'org.graalvm.buildtools.native' version '0.9.28'
}

repositories {
    mavenCentral()
}

dependencies {
    implementation 'org.apache.iceberg:iceberg-core:1.7.1'
    implementation 'org.apache.iceberg:iceberg-api:1.7.1'
    implementation 'org.apache.iceberg:iceberg-aws:1.7.1'
    implementation 'org.apache.iceberg:iceberg-parquet:1.7.1'
    implementation 'org.apache.iceberg:iceberg-data:1.7.1'
    implementation 'org.apache.parquet:parquet-avro:1.12.3'
    implementation 'org.apache.hadoop:hadoop-common:3.3.1'

    implementation 'software.amazon.awssdk:s3:2.30.11'
    implementation 'software.amazon.awssdk:sts:2.30.11'
    implementation 'software.amazon.awssdk:auth:2.30.11'
    implementation 'software.amazon.awssdk:regions:2.30.11'

    compileOnly 'org.graalvm.sdk:graal-sdk:22.0.0'
    implementation 'org.slf4j:slf4j-nop:2.0.9'
    implementation 'org.slf4j:log4j-over-slf4j:2.0.9'
}

application {
    mainClass = 'com.fivetran.iceberg.App' // Update with your package and class name
}

graalvmNative {
    binaries {
        main {
            imageName = 'libjiceberg' // Name of the native executable
            mainClass = 'com.fivetran.iceberg.App' // Update with your package and class name
            fallback = false
            buildArgs.add('--shared')
            buildArgs.add('--initialize-at-run-time=org.apache.log4j')
            buildArgs.add('--initialize-at-run-time=org.slf4j')
            buildArgs.add('--initialize-at-run-time=com.github.benmanes.caffeine.cache.LocalLoadingCache')
            buildArgs.add('--initialize-at-run-time=org.apache.iceberg.util.Pair')
            buildArgs.add('--initialize-at-run-time=org.apache.logging.log4j.util.ProviderUtil')
            buildArgs.add('--initialize-at-run-time=org.apache.logging.log4j.core.impl.Log4jContextFactory')
            buildArgs.add('--initialize-at-run-time=org.apache.commons.logging.LogFactory')
            buildArgs.add('--initialize-at-build-time=org.slf4j,org.apache.logging.slf4j')
            buildArgs.add('-H:+ReportExceptionStackTraces')
            buildArgs.add('--enable-https')

            metadataRepository {
                enabled = true
            }
            configurationFileDirectories.from(file('src/main/resources/META-INF/native-image-config'))
        }
    }
}

def void main(Closure<Boolean> booleanClosure) {}

tasks.register('runWithAgent', JavaExec) {
    classpath = sourceSets.main.runtimeClasspath
    mainClass = 'com.fivetran.iceberg.App'
    jvmArgs = [
            '-agentlib:native-image-agent=config-output-dir=src/main/resources/META-INF/native-image-config'
    ]
}