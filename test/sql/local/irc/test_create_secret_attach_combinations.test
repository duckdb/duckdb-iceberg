# name: test/sql/local/irc/test_create_secret_attach_combinations.test
# description: test combinations of create secret and attah
# group: [irc]

require-env ICEBERG_SERVER_AVAILABLE

require avro

require parquet

require iceberg

require httpfs

# Do not ignore 'HTTP' error messages!
set ignore_error_messages

# Test catalog secret and storage secret
statement ok
pragma enable_logging('HTTP');

statement ok
set logging_level='debug'

statement ok
CREATE SECRET iceberg_secret (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password',
	OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens'
);

statement ok
CREATE SECRET storage_secret(
	TYPE S3,
	KEY_ID 'admin',
	SECRET 'password',
	ENDPOINT '127.0.0.1:9000',
	URL_STYLE 'path',
	USE_SSL 0
);


statement ok
ATTACH '' AS my_datalake (
	TYPE ICEBERG,
	SECRET iceberg_secret,
	ENDPOINT 'http://127.0.0.1:8181'
);


query II
SELECT request.url, response.reason FROM duckdb_logs_parsed('HTTP') WHERE request.type='POST' order by timestamp
----
http://127.0.0.1:8181/v1/oauth/tokens	OK

query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592

# drop the iceberg secret and put everything in the attach statement
statement ok
DROP SECRET iceberg_secret;

statement ok
DETACH my_datalake;

statement ok
ATTACH '' AS my_datalake (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password',
	OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens',
	ENDPOINT 'http://127.0.0.1:8181'
);

query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592

statement ok
Detach my_datalake;

statement ok
ATTACH '' AS my_datalake (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password',
	OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens',
	ENDPOINT 'http://127.0.0.1:8181'
);

query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592

statement ok
Detach my_datalake;

# Use the (deprecated) OAuth2 (/oauth/tokens) endpoint, inferred from the 'endpoint'

statement ok
ATTACH '' AS my_datalake (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password',
	ENDPOINT 'http://127.0.0.1:8181'
);


query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592

statement ok
detach my_datalake;

# use secret for oauth and secret for storage
statement ok
CREATE SECRET iceberg_secret (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password',
	OAUTH2_SERVER_URI 'http://127.0.0.1:8181/v1/oauth/tokens'
);

statement ok
ATTACH '' AS my_datalake (
	TYPE ICEBERG,
	SECRET iceberg_secret,
	ENDPOINT 'http://127.0.0.1:8181'
);

query I
select count(*) from my_datalake.default.pyspark_iceberg_table_v2;
----
6592


statement error
CREATE SECRET simple_iceberg_secret (
	TYPE ICEBERG,
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password'
);
----
Invalid Configuration Error: AUTHORIZATION_TYPE is 'oauth2', yet no 'oauth2_server_uri' was provided, and no 'endpoint' was provided to fall back on. Please provide one or change the 'authorization_type'.

statement ok
CREATE SECRET simple_iceberg_secret (
	TYPE ICEBERG,
	ENDPOINT 'http://127.0.0.1:8181',
	CLIENT_ID 'admin',
	CLIENT_SECRET 'password'
);

