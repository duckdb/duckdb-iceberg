# name: test/sql/local/irc/test_polaris.test
# description: test integration with iceberg catalog read
# group: [irc]

require-env POLARIS_CLIENT_ID

require-env POLARIS_CLIENT_SECRET

require-env POLARIS_SERVER_AVAILABLE

require avro

require parquet

require httpfs

require iceberg

require aws

# Do not ignore 'HTTP' error messages!
set ignore_error_messages

statement ok
create secret polaris_secret (
	TYPE ICEBERG,
	CLIENT_ID '${POLARIS_CLIENT_ID}',
	CLIENT_SECRET '${POLARIS_CLIENT_SECRET}',
	ENDPOINT 'http://0.0.0.0:8181/api/catalog'
);

statement ok
attach 'quickstart_catalog' as my_datalake (
	type ICEBERG,
	ENDPOINT 'http://0.0.0.0:8181/api/catalog'
);

statement ok
show all tables;

# tables may be added, we just want to make sure we are accurately getting the information
query I
select count(*) > 0 from (show all tables);
----
true

query II
select * from my_datalake.default.quickstart_table;
----
1	some data
2	more data
3	yet more data

query IIIIIIII
select * from my_datalake.default.all_types_table;
----
1	100	1000	10000000000	1.23	123.456	12345.67890	2023-01-01
2	200	2000	20000000000	2.34	234.567	23456.78901	2023-06-15
3	300	3000	30000000000	3.45	345.678	34567.89012	2024-12-25


statement ok
create schema my_datalake.schema_1;

statement ok
create table my_datalake.schema_1.polaris_create_table (a int);

statement ok
insert into my_datalake.schema_1.polaris_create_table select range a from range(10);

query I
select * from my_datalake.schema_1.polaris_create_table order by all
----
0
1
2
3
4
5
6
7
8
9

# attach with support stage create as false
# polaris is currently file backed in tests, so folders are not automatically
# created when creating a table with stage_create=true
statement ok
attach or replace 'quickstart_catalog' as my_datalake (
	type ICEBERG,
	ENDPOINT 'http://0.0.0.0:8181/api/catalog',
	SUPPORT_NESTED_NAMESPACES true,
	support_stage_create false
);

statement ok
create table my_datalake.schema_1.polaris_create_table_as as select range a, range::VARCHAR b from range(10, 20);

query II
select * from my_datalake.schema_1.polaris_create_table_as order by all;
----
10	10
11	11
12	12
13	13
14	14
15	15
16	16
17	17
18	18
19	19

statement ok
drop table my_datalake.schema_1.polaris_create_table_as;

statement ok
drop table my_datalake.schema_1.polaris_create_table;

statement ok
drop schema my_datalake.schema_1;

# test nested schemas
statement ok
create schema my_datalake."a";

statement ok
create schema my_datalake."a.nested";

statement ok
create schema my_datalake."a.nested.namespace";

statement ok
create table my_datalake."a.nested.namespace".table_1 (a int);

statement ok
drop table my_datalake."a.nested.namespace".table_1;

statement ok
drop schema my_datalake."a.nested.namespace";

statement ok
drop schema my_datalake."a.nested";

statement ok
drop schema my_datalake."a";